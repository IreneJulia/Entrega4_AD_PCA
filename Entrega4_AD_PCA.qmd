---
title: "Entrega4_AD_PCA"
format: html
authors: "Irene LiFeng Julià Pérez i Xisco Ribera Ramis"
editor: visual
---

[Link del Repositorio](https://github.com/IreneJulia/Entrega4_AD_PCA)

**Considera los datos europa.dat que están disponibles en Aula Digital. Los datos corresponden a los porcentajes de población empleados en diferentes actividades económicas en Europa para el año 1979. Las variables consideradas son: Agricultura, Minas, Fábricas, Suministro Eléctrico, Construcción, Industrias de Servicio, Finanzas, Servicios Sociales y Personales y, Transporte y Comunicaciones. Utiliza el método de componentes principales para reducir el número de variables, y tratar de determinar grupos de países con comportamientos semejantes en la distribución de su fuerza de trabajo. En este caso, usa la matriz de covarianza para el cálculo de las componentes principales, ya que todos los datos están medidos en la misma escala (porcentaje de la población) y por las caractersticas de los datos, no parece una buena idea considerarlos todos de igual manera.**

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(ggplot2)
library(factoextra)
library(ggfortify)
```

Cargamos la tabla de datos:

```{r}
datos = read.table("europa.dat", header = TRUE)
str(datos)
head(datos)
```



Consideramos el dataset en forma de matriz

```{r}
X = as.matrix(datos)
```



Calculamos las componentes

```{r}
datos.acp=prcomp(datos, scale = FALSE, center = TRUE)
datos.acp
```
Los valores propios muestran el porcentaje de varianza explicada por cada componente principal.


```{r}
lambdas = get_eigenvalue(datos.acp)
lambdas
```

Notemos que usando las 2 primeras componentes principales explican entre el 93.3% de los datos. Veamos el gráfico del codo:

```{r}
fviz_eig(datos.acp, addlabels = TRUE, ylim=c(0,100))
```

Efectivamente, nos quedamos con 2 componentes principales.


Realicemos un gráfico de círculo de correlación variable para ver como se agrupan las variables y la calidad de representación de las varaibles 

```{r}
fviz_pca_var(datos.acp, axes = c(1,2), col.var = "contrib",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE)
```

Observemos que la variable `Agricultura` queda muy bien representada por la primera componente principal. De la misma manera, observamos que las variables `Fábricas` y `Servicios Sociales y Personales` tambien estan bastante representadas. De las demás variables estan poco representadas.

Realicemos un gráfico de cos2 para corroborarlo

```{r}
var <- get_pca_var(datos.acp)
fviz_cos2(datos.acp, choice = "var", axes = 1:2)
```

Efectivamente, las pres primeras variables tienen un cos2 alto, por tanto estas bien representadas. En cambio para las demás variables tiene un cos2 prácticamente nulo, indica que estas variables no estan bien representadas por las CPs.

Para ver como se relacionan las componentes principales con los datos originales, veamos los autovectores.

```{r}
datos.acp$rotation
```

Observemos que la primera componente principal da un peso muy elevado y positivo a la variable `Agrucultura`, y de signo contrario a las demás (excepto `Mineria`  con un peso muy bajo).

Respecto a la segunda componente principal representa sobretodo a `Fábrica` y a `Servicios Sociales y Personales`.

```{r}
fviz_pca_biplot(datos.acp,  repel = TRUE,
                col.var = "#2E9FDF", # color para las variables
                col.ind = "#696969"  # color para las observaciones
                )
```


```{r}
# Resultados por Variables
res.var=get_pca_var(datos.acp)
res.var$contrib        # Contribuciones a las CP 
```

```{r}
res.var$cos2           # Calidad de la representación
```

```{r}
# Resultados por observaciones
res.obs=get_pca_ind(datos.acp)
res.obs$coord  #Coordenadas
```

```{r}
round(res.obs$contrib,7)  #Contribuciones a las CP
```


```{r}
round(res.obs$cos2,6)  # Calidad de la representación
```

```{r}
res.obs$cos2[1,1]
datos$Agr
datos[1,]
```

















```{r, eval = FALSE}
autoplot(datos.acp, data = datos, colour = 'Species',
         loadings = TRUE, loadings.colour = 'blue',
         loadings.label = TRUE, loadings.label.size = 3)
```


